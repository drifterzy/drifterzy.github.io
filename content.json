{"pages":[],"posts":[{"title":"c++转换函数","text":"c++转换函数分数类的实现：123456789101112131415class Fraction{public: Fraction(int num,int den = 1)：m_numerator(num),m_denominator(den){} //转换函数 operator double() const{ return (double)(m_numerator/m_denominator); } //操作符+重载(与转换函数同时定义会造成[Error]ambiguous) Fraction operator+(const Fraction&amp; f){ return Fraction(......); }private: int m_numerator; //分子 int m_denominator; //分母} 转换函数的格式：operator 类型() const 不同写返回类型，通常加上const 分数类的调用： conversion function的应用 Fraction f(3,5); double d = 4+f;//调用operator double()将f转换为double类型 non-explicit-one-argument ctor的应用 Fraction f(3,5); Fraction d2 = f+4;//调用non-explicit ctor将4转换为Fraction(4,1)，然后调用operator+* conversion function 与 non-explicit-one-argument ctor同时定义 Fraction f(3,5); Fraction d2 = f+4;//[Error]ambiguous，既可以将4转化为Fraction，也可以将f转化为double explicit-one-argument ctor定义explicit构造函数 Fraction f(3,5); Fraction d2 = f+4;//[Error]conversion from ‘double’ to ‘Fraction’ requested 1explicit Fraction(int num,int den = 1)：m_numerator(num),m_denominator(den){} 构造函数声明为explicit:在C++中，explicit关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换，只能以显示的方式进行类型转换。 explicit使用注意事项： explicit 关键字只能用于类内部的构造函数声明上。 explicit 关键字作用于单个参数的构造函数。 在C++中，explicit关键字用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换","link":"/2020/06/02/c++%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0/"},{"title":"github简单使用","text":"前期准备1、git下载 2、创建SSH key 3、登录github账号添加SSH key 简单上手1、在本地新建一个文件夹用来存放项目 2、打开命令行cd到该地址，git clone 项目名 3、在本地修改文件： 添加文件或目录 删除文件或目录 4、把文件添加到仓库 git add file/directory git rm file/git rm -r directory（同样需要commit和push） 5、使用git status显示还未提交的修改 6、git commit -m “注释”：把文件提交到仓库 7、git push：推送到远程","link":"/2020/06/04/github%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"}],"tags":[],"categories":[]}